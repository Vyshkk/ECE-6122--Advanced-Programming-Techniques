{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red64\green11\blue217;\red200\green20\blue201;\red180\green36\blue25;
\red193\green101\blue28;\red47\green180\blue29;\red224\green228\blue9;\red0\green0\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 // Calculate and display the Mandelbrot set\cf0 \
\cf2 // ECE4893/8893 final project, Fall 2011\cf0 \
\
\cf3 #include \cf4 <iostream>\cf0 \
\cf3 #include \cf4 <string.h>\cf0 \
\cf3 #include \cf4 <stdio.h>\cf0 \
\cf3 #include \cf4 <math.h>\cf0 \
\cf3 #include \cf4 <stdlib.h>\cf0 \
\cf3 #include \cf4 <time.h>\cf0 \
\cf3 #include \cf4 <pthread.h>\cf0 \
\
\cf3 #include \cf4 <GL/glut.h>\cf0 \
\cf3 #include \cf4 <GL/glext.h>\cf0 \
\cf3 #include \cf4 <GL/gl.h>\cf0 \
\cf3 #include \cf4 <GL/glu.h>\cf0 \
\cf3 #include \cf4 "complex.h"\cf0 \
\
\cf5 using\cf0  \cf6 namespace\cf0  std;\
\
\cf2 // Min and max complex plane values\cf0 \
Complex  minC(-\cf4 2.0\cf0 , -\cf4 1.2\cf0 );\
Complex  maxC( \cf4 1.0\cf0 , \cf4 1.8\cf0 );\
\cf6 int\cf0       maxIt = \cf4 2000\cf0 ;     \cf2 // Max iterations for the set computations\cf0 \
\cf6 int\cf0  nThreads=\cf4 16\cf0 ;\
\
\cf6 int\cf0  \cb7 Z\cb1 [\cf4 512\cf0 ][\cf4 512\cf0 ];Complex Z1[\cf4 512\cf0 ][\cf4 512\cf0 ];\
\cf6 int\cf0  color[\cf4 2000\cf0 ][\cf4 3\cf0 ];\
\cf6 int\cf0  startCount=\cf4 16\cf0 ;\
\cf6 int\cf0  vertices[\cf4 4\cf0 ][\cf4 2\cf0 ]=\{\cf4 0\cf0 \};\cf6 int\cf0  mo=\cf4 1\cf0 ;\
\
pthread_mutex_t startCountMutex;\
pthread_mutex_t exitMutex;\
pthread_cond_t exitCond;\
\
\
\cf6 void\cf0  drawrect()\
\{\
glPushMatrix();\
glColor3ub(\cf4 255\cf0 ,\cf4 0\cf0 ,\cf4 0\cf0 );\
glBegin(GL_LINE_LOOP);\
glVertex2d(vertices[\cf4 0\cf0 ][\cf4 0\cf0 ],vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]);\
glVertex2d(vertices[\cf4 1\cf0 ][\cf4 0\cf0 ],vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]);\
glVertex2d(vertices[\cf4 2\cf0 ][\cf4 0\cf0 ],vertices[\cf4 2\cf0 ][\cf4 1\cf0 ]);\
glVertex2d(vertices[\cf4 3\cf0 ][\cf4 0\cf0 ],vertices[\cf4 3\cf0 ][\cf4 1\cf0 ]);\
glEnd();\
glPopMatrix();\
glutSwapBuffers();\
\}\
\
\
\cf6 void\cf0  display(\cf6 void\cf0 )\
\{ \cf2 // Your OpenGL display code here\cf0 \
\
glClear(GL_COLOR_BUFFER_BIT);\
glColor3ub(\cf4 255\cf0 ,\cf4 255\cf0 ,\cf4 255\cf0 );\
glMatrixMode(GL_PROJECTION);\
glPushMatrix();\
glLoadIdentity();\
glOrtho(\cf4 0\cf0 ,\cf4 511\cf0 ,\cf4 511\cf0 ,\cf4 0\cf0 ,\cf4 0\cf0 ,\cf4 1\cf0 );\
glMatrixMode(GL_MODELVIEW);\
\
glBegin(GL_POINTS);\
\cf5 for\cf0 (\cf6 int\cf0  i=\cf4 0\cf0 ;i<\cf4 512\cf0 ;i++)\
\{\cf5 for\cf0 (\cf6 int\cf0  j=\cf4 0\cf0 ;j<\cf4 512\cf0 ;j++)\
\{\cf6 int\cf0  m=\cb7 Z\cb1 [i][j];\
\
glColor3ub(color[m][\cf4 0\cf0 ],color[m][\cf4 1\cf0 ],color[m][\cf4 2\cf0 ]);\
glVertex2i(i,j);\
\
\}\}\
glEnd();\
\
   glFlush();\
\
drawrect();\
glFlush();\
\
\}\
\
\cf6 void\cf0  init()\
\{ \cf2 // Your OpenGL initialization code here\cf0 \
glClearColor(\cf4 0.0\cf0 , \cf4 0.0\cf0 , \cf4 0.0\cf0 , \cf4 0.0\cf0 );\
  glShadeModel(GL_FLAT);\
\}\
\
\
\cf8 //  Calculate Z value\cf0 \
\
\cf6 int\cf0  Zvalue(Complex c)\
\{\
\cf6 int\cf0  i;\cf6 int\cf0  m=\cf4 0\cf0 ;\
\
Complex Zn=Complex(\cf4 0\cf0 ,\cf4 0\cf0 );\
\cf5 for\cf0  (i=\cf4 0\cf0 ;i<maxIt;++i)\
\{\
Zn=(Zn*Zn)+c;\
\cf5 if\cf0 (Zn.Mag().real>\cf4 2.0\cf0 )\
\{\cf5 break\cf0 ;\}\
\}\
\cf5 if\cf0 (i==maxIt)\
\{\cf5 return\cf0  m;\}\
\cf5 else\cf0 \
\{\cf5 return\cf0  i;\}\
\
\}\
\
\cf6 void\cf0  mouse(\cf6 int\cf0  button, \cf6 int\cf0  state, \cf6 int\cf0  x, \cf6 int\cf0  y)\
\{ \cf2 // Your mouse click processing here\cf0 \
  \cf2 // state == 0 means pressed, state != 0 means released\cf0 \
  \cf2 // Note that the x and y coordinates passed in are in\cf0 \
  \cf2 // PIXELS, with y = 0 at the top.\cf0 \
\cf5 if\cf0  (button==GLUT_LEFT_BUTTON&&state==GLUT_DOWN)\
\{vertices[\cf4 0\cf0 ][\cf4 0\cf0 ]=x;vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]=y;\
mo=\cf4 0\cf0 ;\
glutPostRedisplay();\}\
\
\}\
\
\cf6 void\cf0  motion(\cf6 int\cf0  x, \cf6 int\cf0  y)\
\{ \cf2 // Your mouse motion here, x and y coordinates are as above\cf0 \
\cf6 int\cf0  w1,h1;\
\cf5 if\cf0 (mo==\cf4 0\cf0 )\
\{\cf5 if\cf0 (y>vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]&&x==vertices[\cf4 0\cf0 ][\cf4 0\cf0 ])\
\{vertices[\cf4 2\cf0 ][\cf4 0\cf0 ]=x;vertices[\cf4 2\cf0 ][\cf4 1\cf0 ]=y;\
h1=vertices[\cf4 2\cf0 ][\cf4 1\cf0 ]-vertices[\cf4 0\cf0 ][\cf4 1\cf0 ];\
vertices[\cf4 1\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 0\cf0 ]+h1;vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ];\
vertices[\cf4 3\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 0\cf0 ];vertices[\cf4 3\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]+h1;\
\}\
\cf5 else\cf0  \cf5 if\cf0 (x>vertices[\cf4 0\cf0 ][\cf4 0\cf0 ]&&y==vertices[\cf4 0\cf0 ][\cf4 1\cf0 ])\
\{vertices[\cf4 1\cf0 ][\cf4 0\cf0 ]=x;vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]=y;\
w1=vertices[\cf4 1\cf0 ][\cf4 0\cf0 ]-vertices[\cf4 0\cf0 ][\cf4 0\cf0 ];\
vertices[\cf4 2\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 0\cf0 ];vertices[\cf4 2\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]+w1;\
vertices[\cf4 3\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 0\cf0 ];vertices[\cf4 3\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]+w1;\
\}\
\cf5 else\cf0  \cf5 if\cf0 (x<vertices[\cf4 0\cf0 ][\cf4 0\cf0 ]&&y<vertices[\cf4 0\cf0 ][\cf4 1\cf0 ])\
\{h1=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]-y;\
vertices[\cf4 1\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 0\cf0 ];vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]-h1;\
vertices[\cf4 2\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 0\cf0 ]-h1;vertices[\cf4 2\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 1\cf0 ];\
vertices[\cf4 3\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 2\cf0 ][\cf4 0\cf0 ];vertices[\cf4 3\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ];\
\}\
\cf5 else\cf0  \cf5 if\cf0 (x>vertices[\cf4 0\cf0 ][\cf4 0\cf0 ]&&y>vertices[\cf4 0\cf0 ][\cf4 1\cf0 ])\
\{h1=y-vertices[\cf4 0\cf0 ][\cf4 1\cf0 ];\
vertices[\cf4 1\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 0\cf0 ]+h1;vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ];\
vertices[\cf4 2\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 0\cf0 ];vertices[\cf4 2\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 1\cf0 ][\cf4 1\cf0 ]+h1;\
vertices[\cf4 3\cf0 ][\cf4 0\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 0\cf0 ];vertices[\cf4 3\cf0 ][\cf4 1\cf0 ]=vertices[\cf4 0\cf0 ][\cf4 1\cf0 ]+h1;\
\}\
glutPostRedisplay();\
\}\
\cf5 else\cf0 \
exit(\cf4 0\cf0 );\
\
\}\
\
\
\cf6 void\cf0  keyboard(\cf6 unsigned\cf0  \cf6 char\cf0  c, \cf6 int\cf0  x, \cf6 int\cf0  y)\
\{ \cf2 // Your keyboard processing here\cf0 \
\}\
\
\cf6 void\cf0 * CountThread(\cf6 void\cf0 * v)\
\{\
\cf6 unsigned\cf0  \cf6 long\cf0  myId=(\cf6 unsigned\cf0  \cf6 long\cf0 )v;\
\cf6 int\cf0  rowsperthread=\cf4 32\cf0 ;\
\cf6 int\cf0  s_row=rowsperthread*myId;\
\cf5 for\cf0 (\cf6 int\cf0  r=\cf4 0\cf0 ;r<rowsperthread;r++)\
\{\cf6 int\cf0  row=s_row+r;\
\cf5 for\cf0 (\cf6 int\cf0  j=\cf4 0\cf0 ;j<\cf4 512\cf0 ;j++)\
\{\cb7 Z\cb1 [row][j]=Zvalue(Z1[row][j]);\
\
\}\
\
\}\
pthread_mutex_lock(&startCountMutex);\
startCount--;\
\cf5 if\cf0  (startCount == \cf4 0\cf0 )\
\{\
pthread_mutex_unlock(&startCountMutex);\
pthread_mutex_lock(&exitMutex);\
pthread_cond_signal(&exitCond);\
pthread_mutex_unlock(&exitMutex);\
\}\
\
\cf5 else\cf0 \
pthread_mutex_unlock(&startCountMutex);\
\
\}\
\
\
\cf6 int\cf0  main(\cf6 int\cf0  argc, \cf6 char\cf0 ** argv)\
\{\
  \cf2 // Initialize OpenGL, but only on the "master" thread or process.\cf0 \
  \cf2 // See the assignment writeup to determine which is "master" \cf0 \
  \cf2 // and which is slave.\cf0 \
\cf5 for\cf0 (\cf6 int\cf0  i=\cf4 0\cf0 ;i<=\cf4 2000\cf0 ;i++)\
\{ \cf5 if\cf0 (i==\cf4 0\cf0 )\
\{color[i][\cf4 0\cf0 ]=\cf4 0\cf0 ;color[i][\cf4 1\cf0 ]=\cf4 255\cf0 ;color[i][\cf4 2\cf0 ]=\cf4 0\cf0 ;\}\
\cf5 else\cf0  \cf5 if\cf0 (i<=\cf4 7\cf0 )\
\{\
color[i][\cf4 0\cf0 ]=\cf4 255\cf0 ;color[i][\cf4 1\cf0 ]=\cf4 255\cf0 ;color[i][\cf4 2\cf0 ]=\cf4 255\cf0 ;\
\}\
\cf5 else\cf0 \
\{color[i][\cf4 0\cf0 ]=rand()%\cf4 255\cf0 ;\
color[i][\cf4 1\cf0 ]=rand()%\cf4 255\cf0 ;\
color[i][\cf4 2\cf0 ]=rand()%\cf4 255\cf0 ;\
\}\
\}\
\
\cf5 for\cf0 (\cf6 int\cf0  i=\cf4 0\cf0 ;i<\cf4 512\cf0 ;i++)\
\{\cf5 for\cf0  (\cf6 int\cf0  j=\cf4 0\cf0 ;j<\cf4 512\cf0 ;j++)\
\{\
\cf6 double\cf0  r=\cf6 double\cf0 (\cf6 double\cf0 (j/\cf4 512.0\cf0 )*\cf4 3.0\cf0 );\cf6 double\cf0  im=\cf6 double\cf0 (\cf6 double\cf0 (i/\cf4 512.0\cf0 )*\cf4 3.0\cf0 );\
r=r-\cf4 2\cf0 ;im=-\cf4 1.2\cf0 +im;\
\cf2 //cout<<"("<<r<<","<<im<<")";\cf0 \
Z1[i][j]=Complex(r,im);\
\cf2 //Z1[i][j].Print();\cf0 \
\}\
\}\
\
pthread_mutex_init(&exitMutex,\cf4 0\cf0 );\
pthread_mutex_init(&startCountMutex,\cf4 0\cf0 );\
pthread_cond_init(&exitCond, \cf4 0\cf0 );\
pthread_mutex_lock(&exitMutex);\
\
\cf5 for\cf0 (\cf6 int\cf0  i=\cf4 0\cf0 ;i<nThreads;i++)\
\{\
pthread_t pt;\
pthread_create(&pt, \cf4 0\cf0 , CountThread, (\cf6 void\cf0 *)i);\
\}\
\
pthread_cond_wait(&exitCond, &exitMutex);\
cout<<\cf4 "Threads done\cf3 \\n\cf4 "\cf0 ;\
\
\cf6 int\cf0  maxi, mini;maxi=\cb7 Z\cb1 [\cf4 0\cf0 ][\cf4 0\cf0 ];mini=\cb7 Z\cb1 [\cf4 0\cf0 ][\cf4 0\cf0 ];\
\cf5 for\cf0 (\cf6 int\cf0  i=\cf4 0\cf0 ;i<\cf4 512\cf0 ;i++)\
\{\cf5 for\cf0 (\cf6 int\cf0  j=\cf4 0\cf0 ;j<\cf4 512\cf0 ;j++)\
\{\
\cf5 if\cf0 (\cb7 Z\cb1 [i][j]>maxi)\
maxi=\cb7 Z\cb1 [i][j];\
\cf5 if\cf0 (\cb7 Z\cb1 [i][j]<mini)\
mini=\cb7 Z\cb1 [i][j];\
\}\}\
cout<<maxi<<\cf4 ","\cf0 <<mini;\
\
glutInit(&argc, argv);\
  glutInitDisplayMode(GLUT_RGB);\
  glutInitWindowSize(\cf4 512\cf0 , \cf4 512\cf0 );\
  glutInitWindowPosition(\cf4 0\cf0 ,\cf4 0\cf0 );\
  glutCreateWindow(\cf4 "MBSet"\cf0 );\
 init();\
\cf2 //glutReshapeFunc(reshape);\cf0 \
glutDisplayFunc(display);\
glutMouseFunc(mouse);\
glutMotionFunc(motion);\
 glutMainLoop();\
\
\cf5 return\cf0  \cf4 0\cf0 ;\
\}                                                                                                   \
\
\
\
\
}